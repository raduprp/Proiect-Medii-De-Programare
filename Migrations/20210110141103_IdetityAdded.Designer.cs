// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SneakerShop.Models;

namespace SneakerShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210110141103_IdetityAdded")]
    partial class IdetityAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SneakerShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Nike"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Jordan"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Adidas"
                        });
                });

            modelBuilder.Entity("SneakerShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SneakerShop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SneakerId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SneakerId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SneakerShop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SneakerId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("SneakerId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("SneakerShop.Models.Sneaker", b =>
                {
                    b.Property<int>("SneakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSneakerOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SneakerId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Sneakers");

                    b.HasData(
                        new
                        {
                            SneakerId = 1,
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/1ec29293-ed66-446b-8980-7204dc629e1c/air-force-1-07-lx-shoe-bhqSGN.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/1ec29293-ed66-446b-8980-7204dc629e1c/air-force-1-07-lx-shoe-bhqSGN.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = true,
                            Name = "Nike Air Force 1",
                            Price = 110m
                        },
                        new
                        {
                            SneakerId = 2,
                            CategoryId = 2,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_prod_ss/w_640,c_limit,f_auto/84fc4e69-30b8-4a06-9837-26ad18c2da9f/air-jordan-1-volt-gold-release-date-.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_prod_ss/w_640,c_limit,f_auto/84fc4e69-30b8-4a06-9837-26ad18c2da9f/air-jordan-1-volt-gold-release-date-.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = false,
                            Name = "Air Jordan 1 Retro",
                            Price = 200m
                        },
                        new
                        {
                            SneakerId = 3,
                            CategoryId = 2,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/0f751bbf-e4ce-45aa-8454-21de81d27342/jordan-one-take-ii-basketball-shoe-k4Ql69.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/0f751bbf-e4ce-45aa-8454-21de81d27342/jordan-one-take-ii-basketball-shoe-k4Ql69.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = false,
                            Name = "Jordan One Take",
                            Price = 110m
                        },
                        new
                        {
                            SneakerId = 4,
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/a47b2ef9-8239-4e82-99fd-e6159c0df489/air-max-97-shoe-z3TlrlVN.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/a47b2ef9-8239-4e82-99fd-e6159c0df489/air-max-97-shoe-z3TlrlVN.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = false,
                            Name = "Nike Air Max 97",
                            Price = 170m
                        },
                        new
                        {
                            SneakerId = 5,
                            CategoryId = 3,
                            ImageThumbnailUrl = "https://assets.adidas.com/images/h_2000,f_auto,q_auto:sensitive,fl_lossy/7ed0855435194229a525aad6009a0497_9366/Superstar_Shoes_White_EG4958_01_standard.jpg",
                            ImageUrl = "https://assets.adidas.com/images/h_2000,f_auto,q_auto:sensitive,fl_lossy/7ed0855435194229a525aad6009a0497_9366/Superstar_Shoes_White_EG4958_01_standard.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = false,
                            Name = "Adidas Superstars",
                            Price = 90m
                        },
                        new
                        {
                            SneakerId = 6,
                            CategoryId = 3,
                            ImageThumbnailUrl = "https://assets.adidas.com/images/h_2000,f_auto,q_auto:sensitive,fl_lossy/0b49803254284e418fccaaf00111954c_9366/NMD_R1_Shoes_Black_FV9015_01_standard.jpg",
                            ImageUrl = "https://assets.adidas.com/images/h_2000,f_auto,q_auto:sensitive,fl_lossy/0b49803254284e418fccaaf00111954c_9366/NMD_R1_Shoes_Black_FV9015_01_standard.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = false,
                            Name = "Adidas NMD_R1",
                            Price = 120m
                        },
                        new
                        {
                            SneakerId = 7,
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/kxmb3lab5dmy00qpoyul/blazer-mid-77-vintage-shoe-CBDjT0.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/kxmb3lab5dmy00qpoyul/blazer-mid-77-vintage-shoe-CBDjT0.jpg",
                            InStock = false,
                            IsSneakerOfTheWeek = false,
                            Name = "Nike Blazer Mid",
                            Price = 120m
                        },
                        new
                        {
                            SneakerId = 8,
                            CategoryId = 3,
                            ImageThumbnailUrl = "https://assets.adidas.com/images/h_2000,f_auto,q_auto:sensitive,fl_lossy/8c16db10a94c4883ab48abe5010d3788_9366/Ultra4D_Shoes_Black_FW7089_01_standard.jpg",
                            ImageUrl = "https://assets.adidas.com/images/h_2000,f_auto,q_auto:sensitive,fl_lossy/8c16db10a94c4883ab48abe5010d3788_9366/Ultra4D_Shoes_Black_FW7089_01_standard.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = true,
                            Name = "Adidas Ultra4D",
                            Price = 220m
                        },
                        new
                        {
                            SneakerId = 9,
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/d136d71a-6821-41c0-b25b-bc2a28bb8ec3/air-max-2090-shoe-skBBrM.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/d136d71a-6821-41c0-b25b-bc2a28bb8ec3/air-max-2090-shoe-skBBrM.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = true,
                            Name = "Nike AirMax 2090",
                            Price = 180m
                        },
                        new
                        {
                            SneakerId = 10,
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/awjogtdnqxniqqk0wpgf/air-max-270-shoe-nnTrqDGR.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/awjogtdnqxniqqk0wpgf/air-max-270-shoe-nnTrqDGR.jpg",
                            InStock = true,
                            IsSneakerOfTheWeek = false,
                            Name = "Nike AirMax 270",
                            Price = 190m
                        },
                        new
                        {
                            SneakerId = 11,
                            CategoryId = 2,
                            ImageThumbnailUrl = "https://static.nike.com/a/images/t_prod_ss/w_640,c_limit,f_auto/d682f149-f0da-462e-b729-6cf6f02c672b/air-jordan-1-zoom-crater-release-date.jpg",
                            ImageUrl = "https://static.nike.com/a/images/t_prod_ss/w_640,c_limit,f_auto/d682f149-f0da-462e-b729-6cf6f02c672b/air-jordan-1-zoom-crater-release-date.jpg",
                            InStock = false,
                            IsSneakerOfTheWeek = false,
                            Name = "Air Jordan High Zoom",
                            Price = 200m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SneakerShop.Models.OrderDetail", b =>
                {
                    b.HasOne("SneakerShop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SneakerShop.Models.Sneaker", "Sneaker")
                        .WithMany()
                        .HasForeignKey("SneakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Sneaker");
                });

            modelBuilder.Entity("SneakerShop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("SneakerShop.Models.Sneaker", "Sneaker")
                        .WithMany()
                        .HasForeignKey("SneakerId");

                    b.Navigation("Sneaker");
                });

            modelBuilder.Entity("SneakerShop.Models.Sneaker", b =>
                {
                    b.HasOne("SneakerShop.Models.Category", "Category")
                        .WithMany("Sneakers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SneakerShop.Models.Category", b =>
                {
                    b.Navigation("Sneakers");
                });

            modelBuilder.Entity("SneakerShop.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
